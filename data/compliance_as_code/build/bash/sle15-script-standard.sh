###############################################################################
#
# Bash remediation role for profile standard
# Profile Title:  Standard System Security Profile for SUSE Linux Enterprise 15
# Profile Description:
# This profile contains rules to ensure standard security baseline
# of a SUSE Linux Enterprise 15 system based off of the SUSE
# Hardening Guide. Regardless of your system's workload all of
# these checks should pass.
#
# Benchmark ID:  SLE-15
# Benchmark Version:  0.1.50
#
# XCCDF Version:  1.1
#
# This file was generated by OpenSCAP 1.2.17 using:
# 	$ oscap xccdf generate fix --profile standard --template urn:xccdf:fix:script:sh xccdf-file.xml 
#
# This script is generated from an OpenSCAP profile without preliminary evaluation.
# It attempts to fix every selected rule, even if the system is already compliant.
#
# How to apply this remediation role:
# $ sudo ./remediation-role.sh
#
###############################################################################

###############################################################################
# BEGIN fix (1 / 116) for 'package_rsyslog_installed'
###############################################################################
(>&2 echo "Remediating rule 1/116: 'package_rsyslog_installed'")
(>&2 echo "FIX FOR THIS RULE 'package_rsyslog_installed' IS MISSING!")
# END fix for 'package_rsyslog_installed'

###############################################################################
# BEGIN fix (2 / 116) for 'service_rsyslog_enabled'
###############################################################################
(>&2 echo "Remediating rule 2/116: 'service_rsyslog_enabled'")
(>&2 echo "FIX FOR THIS RULE 'service_rsyslog_enabled' IS MISSING!")
# END fix for 'service_rsyslog_enabled'

###############################################################################
# BEGIN fix (3 / 116) for 'ensure_logrotate_activated'
###############################################################################
(>&2 echo "Remediating rule 3/116: 'ensure_logrotate_activated'")

LOGROTATE_CONF_FILE="/etc/logrotate.conf"
CRON_DAILY_LOGROTATE_FILE="/etc/cron.daily/logrotate"

# daily rotation is configured
grep -q "^daily$" $LOGROTATE_CONF_FILE|| echo "daily" >> $LOGROTATE_CONF_FILE

# remove any line configuring weekly, monthly or yearly rotation
sed -i -r "/^(weekly|monthly|yearly)$/d" $LOGROTATE_CONF_FILE

# configure cron.daily if not already
if ! grep -q "^[[:space:]]*/usr/sbin/logrotate[[:alnum:][:blank:][:punct:]]*$LOGROTATE_CONF_FILE$" $CRON_DAILY_LOGROTATE_FILE; then
	echo "#!/bin/sh" > $CRON_DAILY_LOGROTATE_FILE
	echo "/usr/sbin/logrotate $LOGROTATE_CONF_FILE" >> $CRON_DAILY_LOGROTATE_FILE
fi
# END fix for 'ensure_logrotate_activated'

###############################################################################
# BEGIN fix (4 / 116) for 'rsyslog_files_groupownership'
###############################################################################
(>&2 echo "Remediating rule 4/116: 'rsyslog_files_groupownership'")
(>&2 echo "FIX FOR THIS RULE 'rsyslog_files_groupownership' IS MISSING!")
# END fix for 'rsyslog_files_groupownership'

###############################################################################
# BEGIN fix (5 / 116) for 'rsyslog_files_ownership'
###############################################################################
(>&2 echo "Remediating rule 5/116: 'rsyslog_files_ownership'")
(>&2 echo "FIX FOR THIS RULE 'rsyslog_files_ownership' IS MISSING!")
# END fix for 'rsyslog_files_ownership'

###############################################################################
# BEGIN fix (6 / 116) for 'rsyslog_files_permissions'
###############################################################################
(>&2 echo "Remediating rule 6/116: 'rsyslog_files_permissions'")
(>&2 echo "FIX FOR THIS RULE 'rsyslog_files_permissions' IS MISSING!")
# END fix for 'rsyslog_files_permissions'

###############################################################################
# BEGIN fix (7 / 116) for 'package_firewalld_installed'
###############################################################################
(>&2 echo "Remediating rule 7/116: 'package_firewalld_installed'")
(>&2 echo "FIX FOR THIS RULE 'package_firewalld_installed' IS MISSING!")
# END fix for 'package_firewalld_installed'

###############################################################################
# BEGIN fix (8 / 116) for 'sysctl_net_ipv4_conf_default_accept_source_route'
###############################################################################
(>&2 echo "Remediating rule 8/116: 'sysctl_net_ipv4_conf_default_accept_source_route'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_conf_default_accept_source_route' IS MISSING!")
# END fix for 'sysctl_net_ipv4_conf_default_accept_source_route'

###############################################################################
# BEGIN fix (9 / 116) for 'sysctl_net_ipv4_icmp_ignore_bogus_error_responses'
###############################################################################
(>&2 echo "Remediating rule 9/116: 'sysctl_net_ipv4_icmp_ignore_bogus_error_responses'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_icmp_ignore_bogus_error_responses' IS MISSING!")
# END fix for 'sysctl_net_ipv4_icmp_ignore_bogus_error_responses'

###############################################################################
# BEGIN fix (10 / 116) for 'sysctl_net_ipv4_icmp_echo_ignore_broadcasts'
###############################################################################
(>&2 echo "Remediating rule 10/116: 'sysctl_net_ipv4_icmp_echo_ignore_broadcasts'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_icmp_echo_ignore_broadcasts' IS MISSING!")
# END fix for 'sysctl_net_ipv4_icmp_echo_ignore_broadcasts'

###############################################################################
# BEGIN fix (11 / 116) for 'sysctl_net_ipv4_conf_default_accept_redirects'
###############################################################################
(>&2 echo "Remediating rule 11/116: 'sysctl_net_ipv4_conf_default_accept_redirects'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_conf_default_accept_redirects' IS MISSING!")
# END fix for 'sysctl_net_ipv4_conf_default_accept_redirects'

###############################################################################
# BEGIN fix (12 / 116) for 'sysctl_net_ipv4_conf_default_rp_filter'
###############################################################################
(>&2 echo "Remediating rule 12/116: 'sysctl_net_ipv4_conf_default_rp_filter'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_conf_default_rp_filter' IS MISSING!")
# END fix for 'sysctl_net_ipv4_conf_default_rp_filter'

###############################################################################
# BEGIN fix (13 / 116) for 'sysctl_net_ipv4_conf_all_secure_redirects'
###############################################################################
(>&2 echo "Remediating rule 13/116: 'sysctl_net_ipv4_conf_all_secure_redirects'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_conf_all_secure_redirects' IS MISSING!")
# END fix for 'sysctl_net_ipv4_conf_all_secure_redirects'

###############################################################################
# BEGIN fix (14 / 116) for 'sysctl_net_ipv4_conf_all_accept_source_route'
###############################################################################
(>&2 echo "Remediating rule 14/116: 'sysctl_net_ipv4_conf_all_accept_source_route'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_conf_all_accept_source_route' IS MISSING!")
# END fix for 'sysctl_net_ipv4_conf_all_accept_source_route'

###############################################################################
# BEGIN fix (15 / 116) for 'sysctl_net_ipv4_conf_all_accept_redirects'
###############################################################################
(>&2 echo "Remediating rule 15/116: 'sysctl_net_ipv4_conf_all_accept_redirects'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_conf_all_accept_redirects' IS MISSING!")
# END fix for 'sysctl_net_ipv4_conf_all_accept_redirects'

###############################################################################
# BEGIN fix (16 / 116) for 'sysctl_net_ipv4_conf_all_log_martians'
###############################################################################
(>&2 echo "Remediating rule 16/116: 'sysctl_net_ipv4_conf_all_log_martians'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_conf_all_log_martians' IS MISSING!")
# END fix for 'sysctl_net_ipv4_conf_all_log_martians'

###############################################################################
# BEGIN fix (17 / 116) for 'sysctl_net_ipv4_conf_all_rp_filter'
###############################################################################
(>&2 echo "Remediating rule 17/116: 'sysctl_net_ipv4_conf_all_rp_filter'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_conf_all_rp_filter' IS MISSING!")
# END fix for 'sysctl_net_ipv4_conf_all_rp_filter'

###############################################################################
# BEGIN fix (18 / 116) for 'sysctl_net_ipv4_conf_default_secure_redirects'
###############################################################################
(>&2 echo "Remediating rule 18/116: 'sysctl_net_ipv4_conf_default_secure_redirects'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_conf_default_secure_redirects' IS MISSING!")
# END fix for 'sysctl_net_ipv4_conf_default_secure_redirects'

###############################################################################
# BEGIN fix (19 / 116) for 'sysctl_net_ipv4_tcp_invalid_ratelimit'
###############################################################################
(>&2 echo "Remediating rule 19/116: 'sysctl_net_ipv4_tcp_invalid_ratelimit'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_tcp_invalid_ratelimit' IS MISSING!")
# END fix for 'sysctl_net_ipv4_tcp_invalid_ratelimit'

###############################################################################
# BEGIN fix (20 / 116) for 'sysctl_net_ipv4_tcp_syncookies'
###############################################################################
(>&2 echo "Remediating rule 20/116: 'sysctl_net_ipv4_tcp_syncookies'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_tcp_syncookies' IS MISSING!")
# END fix for 'sysctl_net_ipv4_tcp_syncookies'

###############################################################################
# BEGIN fix (21 / 116) for 'sysctl_net_ipv4_conf_default_log_martians'
###############################################################################
(>&2 echo "Remediating rule 21/116: 'sysctl_net_ipv4_conf_default_log_martians'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_conf_default_log_martians' IS MISSING!")
# END fix for 'sysctl_net_ipv4_conf_default_log_martians'

###############################################################################
# BEGIN fix (22 / 116) for 'sysctl_net_ipv4_ip_forward'
###############################################################################
(>&2 echo "Remediating rule 22/116: 'sysctl_net_ipv4_ip_forward'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_ip_forward' IS MISSING!")
# END fix for 'sysctl_net_ipv4_ip_forward'

###############################################################################
# BEGIN fix (23 / 116) for 'sysctl_net_ipv4_conf_all_send_redirects'
###############################################################################
(>&2 echo "Remediating rule 23/116: 'sysctl_net_ipv4_conf_all_send_redirects'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_conf_all_send_redirects' IS MISSING!")
# END fix for 'sysctl_net_ipv4_conf_all_send_redirects'

###############################################################################
# BEGIN fix (24 / 116) for 'sysctl_net_ipv4_conf_default_send_redirects'
###############################################################################
(>&2 echo "Remediating rule 24/116: 'sysctl_net_ipv4_conf_default_send_redirects'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_net_ipv4_conf_default_send_redirects' IS MISSING!")
# END fix for 'sysctl_net_ipv4_conf_default_send_redirects'

###############################################################################
# BEGIN fix (25 / 116) for 'accounts_password_minlen_login_defs'
###############################################################################
(>&2 echo "Remediating rule 25/116: 'accounts_password_minlen_login_defs'")
(>&2 echo "FIX FOR THIS RULE 'accounts_password_minlen_login_defs' IS MISSING!")
# END fix for 'accounts_password_minlen_login_defs'

###############################################################################
# BEGIN fix (26 / 116) for 'display_login_attempts'
###############################################################################
(>&2 echo "Remediating rule 26/116: 'display_login_attempts'")
(>&2 echo "FIX FOR THIS RULE 'display_login_attempts' IS MISSING!")
# END fix for 'display_login_attempts'

###############################################################################
# BEGIN fix (27 / 116) for 'accounts_passwords_pam_faillock_deny_root'
###############################################################################
(>&2 echo "Remediating rule 27/116: 'accounts_passwords_pam_faillock_deny_root'")
(>&2 echo "FIX FOR THIS RULE 'accounts_passwords_pam_faillock_deny_root' IS MISSING!")
# END fix for 'accounts_passwords_pam_faillock_deny_root'

###############################################################################
# BEGIN fix (28 / 116) for 'accounts_passwords_pam_faillock_unlock_time'
###############################################################################
(>&2 echo "Remediating rule 28/116: 'accounts_passwords_pam_faillock_unlock_time'")
(>&2 echo "FIX FOR THIS RULE 'accounts_passwords_pam_faillock_unlock_time' IS MISSING!")
# END fix for 'accounts_passwords_pam_faillock_unlock_time'

###############################################################################
# BEGIN fix (29 / 116) for 'accounts_passwords_pam_faillock_interval'
###############################################################################
(>&2 echo "Remediating rule 29/116: 'accounts_passwords_pam_faillock_interval'")
(>&2 echo "FIX FOR THIS RULE 'accounts_passwords_pam_faillock_interval' IS MISSING!")
# END fix for 'accounts_passwords_pam_faillock_interval'

###############################################################################
# BEGIN fix (30 / 116) for 'accounts_passwords_pam_faillock_deny'
###############################################################################
(>&2 echo "Remediating rule 30/116: 'accounts_passwords_pam_faillock_deny'")
(>&2 echo "FIX FOR THIS RULE 'accounts_passwords_pam_faillock_deny' IS MISSING!")
# END fix for 'accounts_passwords_pam_faillock_deny'

###############################################################################
# BEGIN fix (31 / 116) for 'accounts_password_pam_minlen'
###############################################################################
(>&2 echo "Remediating rule 31/116: 'accounts_password_pam_minlen'")
(>&2 echo "FIX FOR THIS RULE 'accounts_password_pam_minlen' IS MISSING!")
# END fix for 'accounts_password_pam_minlen'

###############################################################################
# BEGIN fix (32 / 116) for 'accounts_password_pam_dcredit'
###############################################################################
(>&2 echo "Remediating rule 32/116: 'accounts_password_pam_dcredit'")
(>&2 echo "FIX FOR THIS RULE 'accounts_password_pam_dcredit' IS MISSING!")
# END fix for 'accounts_password_pam_dcredit'

###############################################################################
# BEGIN fix (33 / 116) for 'accounts_password_pam_ocredit'
###############################################################################
(>&2 echo "Remediating rule 33/116: 'accounts_password_pam_ocredit'")
(>&2 echo "FIX FOR THIS RULE 'accounts_password_pam_ocredit' IS MISSING!")
# END fix for 'accounts_password_pam_ocredit'

###############################################################################
# BEGIN fix (34 / 116) for 'accounts_password_pam_lcredit'
###############################################################################
(>&2 echo "Remediating rule 34/116: 'accounts_password_pam_lcredit'")
(>&2 echo "FIX FOR THIS RULE 'accounts_password_pam_lcredit' IS MISSING!")
# END fix for 'accounts_password_pam_lcredit'

###############################################################################
# BEGIN fix (35 / 116) for 'accounts_password_pam_ucredit'
###############################################################################
(>&2 echo "Remediating rule 35/116: 'accounts_password_pam_ucredit'")
(>&2 echo "FIX FOR THIS RULE 'accounts_password_pam_ucredit' IS MISSING!")
# END fix for 'accounts_password_pam_ucredit'

###############################################################################
# BEGIN fix (36 / 116) for 'accounts_password_pam_retry'
###############################################################################
(>&2 echo "Remediating rule 36/116: 'accounts_password_pam_retry'")
(>&2 echo "FIX FOR THIS RULE 'accounts_password_pam_retry' IS MISSING!")
# END fix for 'accounts_password_pam_retry'

###############################################################################
# BEGIN fix (37 / 116) for 'accounts_tmout'
###############################################################################
(>&2 echo "Remediating rule 37/116: 'accounts_tmout'")
(>&2 echo "FIX FOR THIS RULE 'accounts_tmout' IS MISSING!")
# END fix for 'accounts_tmout'

###############################################################################
# BEGIN fix (38 / 116) for 'accounts_logon_fail_delay'
###############################################################################
(>&2 echo "Remediating rule 38/116: 'accounts_logon_fail_delay'")
(>&2 echo "FIX FOR THIS RULE 'accounts_logon_fail_delay' IS MISSING!")
# END fix for 'accounts_logon_fail_delay'

###############################################################################
# BEGIN fix (39 / 116) for 'accounts_max_concurrent_login_sessions'
###############################################################################
(>&2 echo "Remediating rule 39/116: 'accounts_max_concurrent_login_sessions'")
(>&2 echo "FIX FOR THIS RULE 'accounts_max_concurrent_login_sessions' IS MISSING!")
# END fix for 'accounts_max_concurrent_login_sessions'

###############################################################################
# BEGIN fix (40 / 116) for 'accounts_have_homedir_login_defs'
###############################################################################
(>&2 echo "Remediating rule 40/116: 'accounts_have_homedir_login_defs'")
(>&2 echo "FIX FOR THIS RULE 'accounts_have_homedir_login_defs' IS MISSING!")
# END fix for 'accounts_have_homedir_login_defs'

###############################################################################
# BEGIN fix (41 / 116) for 'sysctl_fs_protected_hardlinks'
###############################################################################
(>&2 echo "Remediating rule 41/116: 'sysctl_fs_protected_hardlinks'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_fs_protected_hardlinks' IS MISSING!")
# END fix for 'sysctl_fs_protected_hardlinks'

###############################################################################
# BEGIN fix (42 / 116) for 'sysctl_fs_protected_symlinks'
###############################################################################
(>&2 echo "Remediating rule 42/116: 'sysctl_fs_protected_symlinks'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_fs_protected_symlinks' IS MISSING!")
# END fix for 'sysctl_fs_protected_symlinks'

###############################################################################
# BEGIN fix (43 / 116) for 'file_permissions_systemmap'
###############################################################################
(>&2 echo "Remediating rule 43/116: 'file_permissions_systemmap'")
(>&2 echo "FIX FOR THIS RULE 'file_permissions_systemmap' IS MISSING!")
# END fix for 'file_permissions_systemmap'

###############################################################################
# BEGIN fix (44 / 116) for 'file_owner_etc_group'
###############################################################################
(>&2 echo "Remediating rule 44/116: 'file_owner_etc_group'")


chown 0 /etc/group
# END fix for 'file_owner_etc_group'

###############################################################################
# BEGIN fix (45 / 116) for 'file_permissions_etc_group'
###############################################################################
(>&2 echo "Remediating rule 45/116: 'file_permissions_etc_group'")

chmod 0644 /etc/group
# END fix for 'file_permissions_etc_group'

###############################################################################
# BEGIN fix (46 / 116) for 'file_groupowner_etc_shadow'
###############################################################################
(>&2 echo "Remediating rule 46/116: 'file_groupowner_etc_shadow'")


chgrp 0 /etc/shadow
# END fix for 'file_groupowner_etc_shadow'

###############################################################################
# BEGIN fix (47 / 116) for 'file_permissions_etc_shadow'
###############################################################################
(>&2 echo "Remediating rule 47/116: 'file_permissions_etc_shadow'")

chmod 0000 /etc/shadow
# END fix for 'file_permissions_etc_shadow'

###############################################################################
# BEGIN fix (48 / 116) for 'file_groupowner_etc_gshadow'
###############################################################################
(>&2 echo "Remediating rule 48/116: 'file_groupowner_etc_gshadow'")


chgrp 0 /etc/gshadow
# END fix for 'file_groupowner_etc_gshadow'

###############################################################################
# BEGIN fix (49 / 116) for 'file_owner_etc_passwd'
###############################################################################
(>&2 echo "Remediating rule 49/116: 'file_owner_etc_passwd'")


chown 0 /etc/passwd
# END fix for 'file_owner_etc_passwd'

###############################################################################
# BEGIN fix (50 / 116) for 'file_owner_etc_gshadow'
###############################################################################
(>&2 echo "Remediating rule 50/116: 'file_owner_etc_gshadow'")


chown 0 /etc/gshadow
# END fix for 'file_owner_etc_gshadow'

###############################################################################
# BEGIN fix (51 / 116) for 'file_groupowner_etc_group'
###############################################################################
(>&2 echo "Remediating rule 51/116: 'file_groupowner_etc_group'")


chgrp 0 /etc/group
# END fix for 'file_groupowner_etc_group'

###############################################################################
# BEGIN fix (52 / 116) for 'file_permissions_etc_passwd'
###############################################################################
(>&2 echo "Remediating rule 52/116: 'file_permissions_etc_passwd'")

chmod 0644 /etc/passwd
# END fix for 'file_permissions_etc_passwd'

###############################################################################
# BEGIN fix (53 / 116) for 'file_owner_etc_shadow'
###############################################################################
(>&2 echo "Remediating rule 53/116: 'file_owner_etc_shadow'")


chown 0 /etc/shadow
# END fix for 'file_owner_etc_shadow'

###############################################################################
# BEGIN fix (54 / 116) for 'file_permissions_etc_gshadow'
###############################################################################
(>&2 echo "Remediating rule 54/116: 'file_permissions_etc_gshadow'")

chmod 0000 /etc/gshadow
# END fix for 'file_permissions_etc_gshadow'

###############################################################################
# BEGIN fix (55 / 116) for 'file_groupowner_etc_passwd'
###############################################################################
(>&2 echo "Remediating rule 55/116: 'file_groupowner_etc_passwd'")


chgrp 0 /etc/passwd
# END fix for 'file_groupowner_etc_passwd'

###############################################################################
# BEGIN fix (56 / 116) for 'sysctl_kernel_dmesg_restrict'
###############################################################################
(>&2 echo "Remediating rule 56/116: 'sysctl_kernel_dmesg_restrict'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_kernel_dmesg_restrict' IS MISSING!")
# END fix for 'sysctl_kernel_dmesg_restrict'

###############################################################################
# BEGIN fix (57 / 116) for 'sysctl_fs_suid_dumpable'
###############################################################################
(>&2 echo "Remediating rule 57/116: 'sysctl_fs_suid_dumpable'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_fs_suid_dumpable' IS MISSING!")
# END fix for 'sysctl_fs_suid_dumpable'

###############################################################################
# BEGIN fix (58 / 116) for 'sysctl_kernel_randomize_va_space'
###############################################################################
(>&2 echo "Remediating rule 58/116: 'sysctl_kernel_randomize_va_space'")
(>&2 echo "FIX FOR THIS RULE 'sysctl_kernel_randomize_va_space' IS MISSING!")
# END fix for 'sysctl_kernel_randomize_va_space'

###############################################################################
# BEGIN fix (59 / 116) for 'package_audit_installed'
###############################################################################
(>&2 echo "Remediating rule 59/116: 'package_audit_installed'")
(>&2 echo "FIX FOR THIS RULE 'package_audit_installed' IS MISSING!")
# END fix for 'package_audit_installed'

###############################################################################
# BEGIN fix (60 / 116) for 'service_auditd_enabled'
###############################################################################
(>&2 echo "Remediating rule 60/116: 'service_auditd_enabled'")
(>&2 echo "FIX FOR THIS RULE 'service_auditd_enabled' IS MISSING!")
# END fix for 'service_auditd_enabled'

###############################################################################
# BEGIN fix (61 / 116) for 'audit_rules_sysadmin_actions'
###############################################################################
(>&2 echo "Remediating rule 61/116: 'audit_rules_sysadmin_actions'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_sysadmin_actions' IS MISSING!")
# END fix for 'audit_rules_sysadmin_actions'

###############################################################################
# BEGIN fix (62 / 116) for 'audit_rules_networkconfig_modification'
###############################################################################
(>&2 echo "Remediating rule 62/116: 'audit_rules_networkconfig_modification'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_networkconfig_modification' IS MISSING!")
# END fix for 'audit_rules_networkconfig_modification'

###############################################################################
# BEGIN fix (63 / 116) for 'audit_rules_usergroup_modification'
###############################################################################
(>&2 echo "Remediating rule 63/116: 'audit_rules_usergroup_modification'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_usergroup_modification' IS MISSING!")
# END fix for 'audit_rules_usergroup_modification'

###############################################################################
# BEGIN fix (64 / 116) for 'audit_rules_media_export'
###############################################################################
(>&2 echo "Remediating rule 64/116: 'audit_rules_media_export'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_media_export' IS MISSING!")
# END fix for 'audit_rules_media_export'

###############################################################################
# BEGIN fix (65 / 116) for 'audit_rules_mac_modification'
###############################################################################
(>&2 echo "Remediating rule 65/116: 'audit_rules_mac_modification'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_mac_modification' IS MISSING!")
# END fix for 'audit_rules_mac_modification'

###############################################################################
# BEGIN fix (66 / 116) for 'audit_rules_kernel_module_loading_finit'
###############################################################################
(>&2 echo "Remediating rule 66/116: 'audit_rules_kernel_module_loading_finit'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_kernel_module_loading_finit' IS MISSING!")
# END fix for 'audit_rules_kernel_module_loading_finit'

###############################################################################
# BEGIN fix (67 / 116) for 'audit_rules_kernel_module_loading_init'
###############################################################################
(>&2 echo "Remediating rule 67/116: 'audit_rules_kernel_module_loading_init'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_kernel_module_loading_init' IS MISSING!")
# END fix for 'audit_rules_kernel_module_loading_init'

###############################################################################
# BEGIN fix (68 / 116) for 'audit_rules_time_stime'
###############################################################################
(>&2 echo "Remediating rule 68/116: 'audit_rules_time_stime'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_time_stime' IS MISSING!")
# END fix for 'audit_rules_time_stime'

###############################################################################
# BEGIN fix (69 / 116) for 'audit_rules_time_settimeofday'
###############################################################################
(>&2 echo "Remediating rule 69/116: 'audit_rules_time_settimeofday'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_time_settimeofday' IS MISSING!")
# END fix for 'audit_rules_time_settimeofday'

###############################################################################
# BEGIN fix (70 / 116) for 'audit_rules_time_watch_localtime'
###############################################################################
(>&2 echo "Remediating rule 70/116: 'audit_rules_time_watch_localtime'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_time_watch_localtime' IS MISSING!")
# END fix for 'audit_rules_time_watch_localtime'

###############################################################################
# BEGIN fix (71 / 116) for 'audit_rules_time_clock_settime'
###############################################################################
(>&2 echo "Remediating rule 71/116: 'audit_rules_time_clock_settime'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_time_clock_settime' IS MISSING!")
# END fix for 'audit_rules_time_clock_settime'

###############################################################################
# BEGIN fix (72 / 116) for 'audit_rules_time_adjtimex'
###############################################################################
(>&2 echo "Remediating rule 72/116: 'audit_rules_time_adjtimex'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_time_adjtimex' IS MISSING!")
# END fix for 'audit_rules_time_adjtimex'

###############################################################################
# BEGIN fix (73 / 116) for 'audit_rules_dac_modification_fchown'
###############################################################################
(>&2 echo "Remediating rule 73/116: 'audit_rules_dac_modification_fchown'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_dac_modification_fchown' IS MISSING!")
# END fix for 'audit_rules_dac_modification_fchown'

###############################################################################
# BEGIN fix (74 / 116) for 'audit_rules_dac_modification_setxattr'
###############################################################################
(>&2 echo "Remediating rule 74/116: 'audit_rules_dac_modification_setxattr'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_dac_modification_setxattr' IS MISSING!")
# END fix for 'audit_rules_dac_modification_setxattr'

###############################################################################
# BEGIN fix (75 / 116) for 'audit_rules_dac_modification_chown'
###############################################################################
(>&2 echo "Remediating rule 75/116: 'audit_rules_dac_modification_chown'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_dac_modification_chown' IS MISSING!")
# END fix for 'audit_rules_dac_modification_chown'

###############################################################################
# BEGIN fix (76 / 116) for 'audit_rules_dac_modification_fchownat'
###############################################################################
(>&2 echo "Remediating rule 76/116: 'audit_rules_dac_modification_fchownat'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_dac_modification_fchownat' IS MISSING!")
# END fix for 'audit_rules_dac_modification_fchownat'

###############################################################################
# BEGIN fix (77 / 116) for 'audit_rules_dac_modification_chmod'
###############################################################################
(>&2 echo "Remediating rule 77/116: 'audit_rules_dac_modification_chmod'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_dac_modification_chmod' IS MISSING!")
# END fix for 'audit_rules_dac_modification_chmod'

###############################################################################
# BEGIN fix (78 / 116) for 'audit_rules_dac_modification_removexattr'
###############################################################################
(>&2 echo "Remediating rule 78/116: 'audit_rules_dac_modification_removexattr'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_dac_modification_removexattr' IS MISSING!")
# END fix for 'audit_rules_dac_modification_removexattr'

###############################################################################
# BEGIN fix (79 / 116) for 'audit_rules_dac_modification_fchmod'
###############################################################################
(>&2 echo "Remediating rule 79/116: 'audit_rules_dac_modification_fchmod'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_dac_modification_fchmod' IS MISSING!")
# END fix for 'audit_rules_dac_modification_fchmod'

###############################################################################
# BEGIN fix (80 / 116) for 'audit_rules_dac_modification_lsetxattr'
###############################################################################
(>&2 echo "Remediating rule 80/116: 'audit_rules_dac_modification_lsetxattr'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_dac_modification_lsetxattr' IS MISSING!")
# END fix for 'audit_rules_dac_modification_lsetxattr'

###############################################################################
# BEGIN fix (81 / 116) for 'audit_rules_dac_modification_fremovexattr'
###############################################################################
(>&2 echo "Remediating rule 81/116: 'audit_rules_dac_modification_fremovexattr'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_dac_modification_fremovexattr' IS MISSING!")
# END fix for 'audit_rules_dac_modification_fremovexattr'

###############################################################################
# BEGIN fix (82 / 116) for 'audit_rules_dac_modification_lchown'
###############################################################################
(>&2 echo "Remediating rule 82/116: 'audit_rules_dac_modification_lchown'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_dac_modification_lchown' IS MISSING!")
# END fix for 'audit_rules_dac_modification_lchown'

###############################################################################
# BEGIN fix (83 / 116) for 'audit_rules_dac_modification_fsetxattr'
###############################################################################
(>&2 echo "Remediating rule 83/116: 'audit_rules_dac_modification_fsetxattr'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_dac_modification_fsetxattr' IS MISSING!")
# END fix for 'audit_rules_dac_modification_fsetxattr'

###############################################################################
# BEGIN fix (84 / 116) for 'audit_rules_dac_modification_fchmodat'
###############################################################################
(>&2 echo "Remediating rule 84/116: 'audit_rules_dac_modification_fchmodat'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_dac_modification_fchmodat' IS MISSING!")
# END fix for 'audit_rules_dac_modification_fchmodat'

###############################################################################
# BEGIN fix (85 / 116) for 'audit_rules_dac_modification_lremovexattr'
###############################################################################
(>&2 echo "Remediating rule 85/116: 'audit_rules_dac_modification_lremovexattr'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_dac_modification_lremovexattr' IS MISSING!")
# END fix for 'audit_rules_dac_modification_lremovexattr'

###############################################################################
# BEGIN fix (86 / 116) for 'audit_rules_unsuccessful_file_modification'
###############################################################################
(>&2 echo "Remediating rule 86/116: 'audit_rules_unsuccessful_file_modification'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_unsuccessful_file_modification' IS MISSING!")
# END fix for 'audit_rules_unsuccessful_file_modification'

###############################################################################
# BEGIN fix (87 / 116) for 'audit_rules_successful_file_modification_chmod'
###############################################################################
(>&2 echo "Remediating rule 87/116: 'audit_rules_successful_file_modification_chmod'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_successful_file_modification_chmod' IS MISSING!")
# END fix for 'audit_rules_successful_file_modification_chmod'

###############################################################################
# BEGIN fix (88 / 116) for 'audit_rules_file_deletion_events_rmdir'
###############################################################################
(>&2 echo "Remediating rule 88/116: 'audit_rules_file_deletion_events_rmdir'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_file_deletion_events_rmdir' IS MISSING!")
# END fix for 'audit_rules_file_deletion_events_rmdir'

###############################################################################
# BEGIN fix (89 / 116) for 'audit_rules_file_deletion_events_unlinkat'
###############################################################################
(>&2 echo "Remediating rule 89/116: 'audit_rules_file_deletion_events_unlinkat'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_file_deletion_events_unlinkat' IS MISSING!")
# END fix for 'audit_rules_file_deletion_events_unlinkat'

###############################################################################
# BEGIN fix (90 / 116) for 'audit_rules_file_deletion_events'
###############################################################################
(>&2 echo "Remediating rule 90/116: 'audit_rules_file_deletion_events'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_file_deletion_events' IS MISSING!")
# END fix for 'audit_rules_file_deletion_events'

###############################################################################
# BEGIN fix (91 / 116) for 'audit_rules_file_deletion_events_unlink'
###############################################################################
(>&2 echo "Remediating rule 91/116: 'audit_rules_file_deletion_events_unlink'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_file_deletion_events_unlink' IS MISSING!")
# END fix for 'audit_rules_file_deletion_events_unlink'

###############################################################################
# BEGIN fix (92 / 116) for 'audit_rules_privileged_commands'
###############################################################################
(>&2 echo "Remediating rule 92/116: 'audit_rules_privileged_commands'")
(>&2 echo "FIX FOR THIS RULE 'audit_rules_privileged_commands' IS MISSING!")
# END fix for 'audit_rules_privileged_commands'

###############################################################################
# BEGIN fix (93 / 116) for 'partition_for_home'
###############################################################################
(>&2 echo "Remediating rule 93/116: 'partition_for_home'")
(>&2 echo "FIX FOR THIS RULE 'partition_for_home' IS MISSING!")
# END fix for 'partition_for_home'

###############################################################################
# BEGIN fix (94 / 116) for 'partition_for_tmp'
###############################################################################
(>&2 echo "Remediating rule 94/116: 'partition_for_tmp'")
(>&2 echo "FIX FOR THIS RULE 'partition_for_tmp' IS MISSING!")
# END fix for 'partition_for_tmp'

###############################################################################
# BEGIN fix (95 / 116) for 'partition_for_var'
###############################################################################
(>&2 echo "Remediating rule 95/116: 'partition_for_var'")
(>&2 echo "FIX FOR THIS RULE 'partition_for_var' IS MISSING!")
# END fix for 'partition_for_var'

###############################################################################
# BEGIN fix (96 / 116) for 'partition_for_var_log_audit'
###############################################################################
(>&2 echo "Remediating rule 96/116: 'partition_for_var_log_audit'")
(>&2 echo "FIX FOR THIS RULE 'partition_for_var_log_audit' IS MISSING!")
# END fix for 'partition_for_var_log_audit'

###############################################################################
# BEGIN fix (97 / 116) for 'partition_for_var_log'
###############################################################################
(>&2 echo "Remediating rule 97/116: 'partition_for_var_log'")
(>&2 echo "FIX FOR THIS RULE 'partition_for_var_log' IS MISSING!")
# END fix for 'partition_for_var_log'

###############################################################################
# BEGIN fix (98 / 116) for 'package_cron_installed'
###############################################################################
(>&2 echo "Remediating rule 98/116: 'package_cron_installed'")
(>&2 echo "FIX FOR THIS RULE 'package_cron_installed' IS MISSING!")
# END fix for 'package_cron_installed'

###############################################################################
# BEGIN fix (99 / 116) for 'service_cron_enabled'
###############################################################################
(>&2 echo "Remediating rule 99/116: 'service_cron_enabled'")
(>&2 echo "FIX FOR THIS RULE 'service_cron_enabled' IS MISSING!")
# END fix for 'service_cron_enabled'

###############################################################################
# BEGIN fix (100 / 116) for 'package_httpd_removed'
###############################################################################
(>&2 echo "Remediating rule 100/116: 'package_httpd_removed'")

# CAUTION: This remediation script will remove httpd
#	   from the system, and may remove any packages
#	   that depend on httpd. Execute this
#	   remediation AFTER testing on a non-production
#	   system!

printf '%s\n' "Can't generate a remediation for zypper" >&2
exit 1
# END fix for 'package_httpd_removed'

###############################################################################
# BEGIN fix (101 / 116) for 'service_httpd_disabled'
###############################################################################
(>&2 echo "Remediating rule 101/116: 'service_httpd_disabled'")


SYSTEMCTL_EXEC='/usr/bin/systemctl'
"$SYSTEMCTL_EXEC" stop 'httpd.service'
"$SYSTEMCTL_EXEC" disable 'httpd.service'
"$SYSTEMCTL_EXEC" mask 'httpd.service'
# Disable socket activation if we have a unit file for it
if "$SYSTEMCTL_EXEC" list-unit-files | grep -q '^httpd.socket'; then
    "$SYSTEMCTL_EXEC" stop 'httpd.socket'
    "$SYSTEMCTL_EXEC" disable 'httpd.socket'
    "$SYSTEMCTL_EXEC" mask 'httpd.socket'
fi
# The service may not be running because it has been started and failed,
# so let's reset the state so OVAL checks pass.
# Service should be 'inactive', not 'failed' after reboot though.
"$SYSTEMCTL_EXEC" reset-failed 'httpd.service' || true
# END fix for 'service_httpd_disabled'

###############################################################################
# BEGIN fix (102 / 116) for 'package_ntp_installed'
###############################################################################
(>&2 echo "Remediating rule 102/116: 'package_ntp_installed'")
(>&2 echo "FIX FOR THIS RULE 'package_ntp_installed' IS MISSING!")
# END fix for 'package_ntp_installed'

###############################################################################
# BEGIN fix (103 / 116) for 'service_ntp_enabled'
###############################################################################
(>&2 echo "Remediating rule 103/116: 'service_ntp_enabled'")
(>&2 echo "FIX FOR THIS RULE 'service_ntp_enabled' IS MISSING!")
# END fix for 'service_ntp_enabled'

###############################################################################
# BEGIN fix (104 / 116) for 'package_nis_removed'
###############################################################################
(>&2 echo "Remediating rule 104/116: 'package_nis_removed'")

# CAUTION: This remediation script will remove nis
#	   from the system, and may remove any packages
#	   that depend on nis. Execute this
#	   remediation AFTER testing on a non-production
#	   system!

printf '%s\n' "Can't generate a remediation for zypper" >&2
exit 1
# END fix for 'package_nis_removed'

###############################################################################
# BEGIN fix (105 / 116) for 'package_telnetd_removed'
###############################################################################
(>&2 echo "Remediating rule 105/116: 'package_telnetd_removed'")

# CAUTION: This remediation script will remove telnetd
#	   from the system, and may remove any packages
#	   that depend on telnetd. Execute this
#	   remediation AFTER testing on a non-production
#	   system!

printf '%s\n' "Can't generate a remediation for zypper" >&2
exit 1
# END fix for 'package_telnetd_removed'

###############################################################################
# BEGIN fix (106 / 116) for 'package_ntpdate_removed'
###############################################################################
(>&2 echo "Remediating rule 106/116: 'package_ntpdate_removed'")

# CAUTION: This remediation script will remove ntpdate
#	   from the system, and may remove any packages
#	   that depend on ntpdate. Execute this
#	   remediation AFTER testing on a non-production
#	   system!

printf '%s\n' "Can't generate a remediation for zypper" >&2
exit 1
# END fix for 'package_ntpdate_removed'

###############################################################################
# BEGIN fix (107 / 116) for 'package_telnetd-ssl_removed'
###############################################################################
(>&2 echo "Remediating rule 107/116: 'package_telnetd-ssl_removed'")

# CAUTION: This remediation script will remove telnetd-ssl
#	   from the system, and may remove any packages
#	   that depend on telnetd-ssl. Execute this
#	   remediation AFTER testing on a non-production
#	   system!

printf '%s\n' "Can't generate a remediation for zypper" >&2
exit 1
# END fix for 'package_telnetd-ssl_removed'

###############################################################################
# BEGIN fix (108 / 116) for 'package_inetutils-telnetd_removed'
###############################################################################
(>&2 echo "Remediating rule 108/116: 'package_inetutils-telnetd_removed'")

# CAUTION: This remediation script will remove inetutils-telnetd
#	   from the system, and may remove any packages
#	   that depend on inetutils-telnetd. Execute this
#	   remediation AFTER testing on a non-production
#	   system!

printf '%s\n' "Can't generate a remediation for zypper" >&2
exit 1
# END fix for 'package_inetutils-telnetd_removed'

###############################################################################
# BEGIN fix (109 / 116) for 'package_openssh_installed'
###############################################################################
(>&2 echo "Remediating rule 109/116: 'package_openssh_installed'")
(>&2 echo "FIX FOR THIS RULE 'package_openssh_installed' IS MISSING!")
# END fix for 'package_openssh_installed'

###############################################################################
# BEGIN fix (110 / 116) for 'service_sshd_enabled'
###############################################################################
(>&2 echo "Remediating rule 110/116: 'service_sshd_enabled'")
(>&2 echo "FIX FOR THIS RULE 'service_sshd_enabled' IS MISSING!")
# END fix for 'service_sshd_enabled'

###############################################################################
# BEGIN fix (111 / 116) for 'sshd_disable_empty_passwords'
###############################################################################
(>&2 echo "Remediating rule 111/116: 'sshd_disable_empty_passwords'")
if [ -e "/etc/ssh/sshd_config" ] ; then
    LC_ALL=C sed -i "/^\s*PermitEmptyPasswords\s\+/Id" "/etc/ssh/sshd_config"
else
    touch "/etc/ssh/sshd_config"
fi
cp "/etc/ssh/sshd_config" "/etc/ssh/sshd_config.bak"
# Insert before the line matching the regex '^Match'.
line_number="$(LC_ALL=C grep -n "^Match" "/etc/ssh/sshd_config.bak" | LC_ALL=C sed 's/:.*//g')"
if [ -z "$line_number" ]; then
    # There was no match of '^Match', insert at
    # the end of the file.
    printf '%s\n' "PermitEmptyPasswords no" >> "/etc/ssh/sshd_config"
else
    head -n "$(( line_number - 1 ))" "/etc/ssh/sshd_config.bak" > "/etc/ssh/sshd_config"
    printf '%s\n' "PermitEmptyPasswords no" >> "/etc/ssh/sshd_config"
    tail -n "+$(( line_number ))" "/etc/ssh/sshd_config.bak" >> "/etc/ssh/sshd_config"
fi
# Clean up after ourselves.
rm "/etc/ssh/sshd_config.bak"
# END fix for 'sshd_disable_empty_passwords'

###############################################################################
# BEGIN fix (112 / 116) for 'sshd_set_keepalive'
###############################################################################
(>&2 echo "Remediating rule 112/116: 'sshd_set_keepalive'")

var_sshd_set_keepalive="0"
# Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append <config_file_location> <key_to_search> <new_value> [<CCE number or literal '@CCENUM@' if unknown>] [printf-like format, default is '$default_format']" >&2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] && [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \>),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\>" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\>.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" >> "$config_file"
    printf '%s\n' "$formatted_output" >> "$config_file"
  fi
}
replace_or_append '/etc/ssh/sshd_config' '^ClientAliveCountMax' "$var_sshd_set_keepalive" '' '%s %s'
# END fix for 'sshd_set_keepalive'

###############################################################################
# BEGIN fix (113 / 116) for 'sshd_allow_only_protocol2'
###############################################################################
(>&2 echo "Remediating rule 113/116: 'sshd_allow_only_protocol2'")
if [ -e "/etc/ssh/sshd_config" ] ; then
    LC_ALL=C sed -i "/^\s*Protocol\s\+/Id" "/etc/ssh/sshd_config"
else
    touch "/etc/ssh/sshd_config"
fi
cp "/etc/ssh/sshd_config" "/etc/ssh/sshd_config.bak"
# Insert before the line matching the regex '^Match'.
line_number="$(LC_ALL=C grep -n "^Match" "/etc/ssh/sshd_config.bak" | LC_ALL=C sed 's/:.*//g')"
if [ -z "$line_number" ]; then
    # There was no match of '^Match', insert at
    # the end of the file.
    printf '%s\n' "Protocol 2" >> "/etc/ssh/sshd_config"
else
    head -n "$(( line_number - 1 ))" "/etc/ssh/sshd_config.bak" > "/etc/ssh/sshd_config"
    printf '%s\n' "Protocol 2" >> "/etc/ssh/sshd_config"
    tail -n "+$(( line_number ))" "/etc/ssh/sshd_config.bak" >> "/etc/ssh/sshd_config"
fi
# Clean up after ourselves.
rm "/etc/ssh/sshd_config.bak"
# END fix for 'sshd_allow_only_protocol2'

###############################################################################
# BEGIN fix (114 / 116) for 'sshd_set_idle_timeout'
###############################################################################
(>&2 echo "Remediating rule 114/116: 'sshd_set_idle_timeout'")

sshd_idle_timeout_value="300"
# Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append <config_file_location> <key_to_search> <new_value> [<CCE number or literal '@CCENUM@' if unknown>] [printf-like format, default is '$default_format']" >&2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] && [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \>),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\>" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\>.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" >> "$config_file"
    printf '%s\n' "$formatted_output" >> "$config_file"
  fi
}
replace_or_append '/etc/ssh/sshd_config' '^ClientAliveInterval' $sshd_idle_timeout_value '' '%s %s'
# END fix for 'sshd_set_idle_timeout'

###############################################################################
# BEGIN fix (115 / 116) for 'sshd_enable_x11_forwarding'
###############################################################################
(>&2 echo "Remediating rule 115/116: 'sshd_enable_x11_forwarding'")
if [ -e "/etc/ssh/sshd_config" ] ; then
    LC_ALL=C sed -i "/^\s*X11Forwarding\s\+/Id" "/etc/ssh/sshd_config"
else
    touch "/etc/ssh/sshd_config"
fi
cp "/etc/ssh/sshd_config" "/etc/ssh/sshd_config.bak"
# Insert before the line matching the regex '^Match'.
line_number="$(LC_ALL=C grep -n "^Match" "/etc/ssh/sshd_config.bak" | LC_ALL=C sed 's/:.*//g')"
if [ -z "$line_number" ]; then
    # There was no match of '^Match', insert at
    # the end of the file.
    printf '%s\n' "X11Forwarding yes" >> "/etc/ssh/sshd_config"
else
    head -n "$(( line_number - 1 ))" "/etc/ssh/sshd_config.bak" > "/etc/ssh/sshd_config"
    printf '%s\n' "X11Forwarding yes" >> "/etc/ssh/sshd_config"
    tail -n "+$(( line_number ))" "/etc/ssh/sshd_config.bak" >> "/etc/ssh/sshd_config"
fi
# Clean up after ourselves.
rm "/etc/ssh/sshd_config.bak"
# END fix for 'sshd_enable_x11_forwarding'

###############################################################################
# BEGIN fix (116 / 116) for 'sshd_disable_root_login'
###############################################################################
(>&2 echo "Remediating rule 116/116: 'sshd_disable_root_login'")
if [ -e "/etc/ssh/sshd_config" ] ; then
    LC_ALL=C sed -i "/^\s*PermitRootLogin\s\+/Id" "/etc/ssh/sshd_config"
else
    touch "/etc/ssh/sshd_config"
fi
cp "/etc/ssh/sshd_config" "/etc/ssh/sshd_config.bak"
# Insert before the line matching the regex '^Match'.
line_number="$(LC_ALL=C grep -n "^Match" "/etc/ssh/sshd_config.bak" | LC_ALL=C sed 's/:.*//g')"
if [ -z "$line_number" ]; then
    # There was no match of '^Match', insert at
    # the end of the file.
    printf '%s\n' "PermitRootLogin no" >> "/etc/ssh/sshd_config"
else
    head -n "$(( line_number - 1 ))" "/etc/ssh/sshd_config.bak" > "/etc/ssh/sshd_config"
    printf '%s\n' "PermitRootLogin no" >> "/etc/ssh/sshd_config"
    tail -n "+$(( line_number ))" "/etc/ssh/sshd_config.bak" >> "/etc/ssh/sshd_config"
fi
# Clean up after ourselves.
rm "/etc/ssh/sshd_config.bak"
# END fix for 'sshd_disable_root_login'

