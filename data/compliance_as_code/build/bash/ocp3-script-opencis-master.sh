###############################################################################
#
# Bash remediation role for profile opencis-master
# Profile Title:  Open Computing Information Security Profile for OpenShift Master Node
# Profile Description:
# This baseline was inspired by the Center for Internet Security
# (CIS) Kubernetes Benchmark, v1.2.0 - 01-31-2017.
# 
# For the ComplianceAsCode project to remain in compliance with
# CIS' terms and conditions, specifically Restrictions(8), note
# there is no representation or claim that the OpenCIS profile will
# ensure a system is in compliance or consistency with the CIS
# baseline.
#
# Benchmark ID:  OCP-3
# Benchmark Version:  0.1.50
#
# XCCDF Version:  1.1
#
# This file was generated by OpenSCAP 1.2.17 using:
# 	$ oscap xccdf generate fix --profile opencis-master --template urn:xccdf:fix:script:sh xccdf-file.xml 
#
# This script is generated from an OpenSCAP profile without preliminary evaluation.
# It attempts to fix every selected rule, even if the system is already compliant.
#
# How to apply this remediation role:
# $ sudo ./remediation-role.sh
#
###############################################################################

###############################################################################
# BEGIN fix (1 / 109) for 'scheduler_profiling_argument'
###############################################################################
(>&2 echo "Remediating rule 1/109: 'scheduler_profiling_argument'")
(>&2 echo "FIX FOR THIS RULE 'scheduler_profiling_argument' IS MISSING!")
# END fix for 'scheduler_profiling_argument'

###############################################################################
# BEGIN fix (2 / 109) for 'kubelet_configure_client_ca'
###############################################################################
(>&2 echo "Remediating rule 2/109: 'kubelet_configure_client_ca'")
(>&2 echo "FIX FOR THIS RULE 'kubelet_configure_client_ca' IS MISSING!")
# END fix for 'kubelet_configure_client_ca'

###############################################################################
# BEGIN fix (3 / 109) for 'kubelet_disable_readonly_port'
###############################################################################
(>&2 echo "Remediating rule 3/109: 'kubelet_disable_readonly_port'")
(>&2 echo "FIX FOR THIS RULE 'kubelet_disable_readonly_port' IS MISSING!")
# END fix for 'kubelet_disable_readonly_port'

###############################################################################
# BEGIN fix (4 / 109) for 'kubelet_enable_iptables_util_chains'
###############################################################################
(>&2 echo "Remediating rule 4/109: 'kubelet_enable_iptables_util_chains'")
(>&2 echo "FIX FOR THIS RULE 'kubelet_enable_iptables_util_chains' IS MISSING!")
# END fix for 'kubelet_enable_iptables_util_chains'

###############################################################################
# BEGIN fix (5 / 109) for 'kubelet_enable_server_cert_rotation'
###############################################################################
(>&2 echo "Remediating rule 5/109: 'kubelet_enable_server_cert_rotation'")
(>&2 echo "FIX FOR THIS RULE 'kubelet_enable_server_cert_rotation' IS MISSING!")
# END fix for 'kubelet_enable_server_cert_rotation'

###############################################################################
# BEGIN fix (6 / 109) for 'kubelet_configure_tls_cert'
###############################################################################
(>&2 echo "Remediating rule 6/109: 'kubelet_configure_tls_cert'")
(>&2 echo "FIX FOR THIS RULE 'kubelet_configure_tls_cert' IS MISSING!")
# END fix for 'kubelet_configure_tls_cert'

###############################################################################
# BEGIN fix (7 / 109) for 'kubelet_enable_streaming_connections'
###############################################################################
(>&2 echo "Remediating rule 7/109: 'kubelet_enable_streaming_connections'")
(>&2 echo "FIX FOR THIS RULE 'kubelet_enable_streaming_connections' IS MISSING!")
# END fix for 'kubelet_enable_streaming_connections'

###############################################################################
# BEGIN fix (8 / 109) for 'kubelet_configure_event_creation'
###############################################################################
(>&2 echo "Remediating rule 8/109: 'kubelet_configure_event_creation'")
(>&2 echo "FIX FOR THIS RULE 'kubelet_configure_event_creation' IS MISSING!")
# END fix for 'kubelet_configure_event_creation'

###############################################################################
# BEGIN fix (9 / 109) for 'kubelet_configure_tls_key'
###############################################################################
(>&2 echo "Remediating rule 9/109: 'kubelet_configure_tls_key'")
(>&2 echo "FIX FOR THIS RULE 'kubelet_configure_tls_key' IS MISSING!")
# END fix for 'kubelet_configure_tls_key'

###############################################################################
# BEGIN fix (10 / 109) for 'kubelet_disable_hostname_override'
###############################################################################
(>&2 echo "Remediating rule 10/109: 'kubelet_disable_hostname_override'")
(>&2 echo "FIX FOR THIS RULE 'kubelet_disable_hostname_override' IS MISSING!")
# END fix for 'kubelet_disable_hostname_override'

###############################################################################
# BEGIN fix (11 / 109) for 'kubelet_enable_client_cert_rotation'
###############################################################################
(>&2 echo "Remediating rule 11/109: 'kubelet_enable_client_cert_rotation'")
(>&2 echo "FIX FOR THIS RULE 'kubelet_enable_client_cert_rotation' IS MISSING!")
# END fix for 'kubelet_enable_client_cert_rotation'

###############################################################################
# BEGIN fix (12 / 109) for 'kubelet_disable_cadvisor_port'
###############################################################################
(>&2 echo "Remediating rule 12/109: 'kubelet_disable_cadvisor_port'")
(>&2 echo "FIX FOR THIS RULE 'kubelet_disable_cadvisor_port' IS MISSING!")
# END fix for 'kubelet_disable_cadvisor_port'

###############################################################################
# BEGIN fix (13 / 109) for 'controller_disable_profiling'
###############################################################################
(>&2 echo "Remediating rule 13/109: 'controller_disable_profiling'")
(>&2 echo "FIX FOR THIS RULE 'controller_disable_profiling' IS MISSING!")
# END fix for 'controller_disable_profiling'

###############################################################################
# BEGIN fix (14 / 109) for 'controller_bind_address'
###############################################################################
(>&2 echo "Remediating rule 14/109: 'controller_bind_address'")
(>&2 echo "FIX FOR THIS RULE 'controller_bind_address' IS MISSING!")
# END fix for 'controller_bind_address'

###############################################################################
# BEGIN fix (15 / 109) for 'controller_use_service_account'
###############################################################################
(>&2 echo "Remediating rule 15/109: 'controller_use_service_account'")
(>&2 echo "FIX FOR THIS RULE 'controller_use_service_account' IS MISSING!")
# END fix for 'controller_use_service_account'

###############################################################################
# BEGIN fix (16 / 109) for 'controller_terminated_pod_gc_threshhold'
###############################################################################
(>&2 echo "Remediating rule 16/109: 'controller_terminated_pod_gc_threshhold'")
(>&2 echo "FIX FOR THIS RULE 'controller_terminated_pod_gc_threshhold' IS MISSING!")
# END fix for 'controller_terminated_pod_gc_threshhold'

###############################################################################
# BEGIN fix (17 / 109) for 'controller_rotate_kubelet_server_certs'
###############################################################################
(>&2 echo "Remediating rule 17/109: 'controller_rotate_kubelet_server_certs'")
(>&2 echo "FIX FOR THIS RULE 'controller_rotate_kubelet_server_certs' IS MISSING!")
# END fix for 'controller_rotate_kubelet_server_certs'

###############################################################################
# BEGIN fix (18 / 109) for 'etcd_auto_tls'
###############################################################################
(>&2 echo "Remediating rule 18/109: 'etcd_auto_tls'")
# Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append <config_file_location> <key_to_search> <new_value> [<CCE number or literal '@CCENUM@' if unknown>] [printf-like format, default is '$default_format']" >&2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] && [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \>),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\>" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\>.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" >> "$config_file"
    printf '%s\n' "$formatted_output" >> "$config_file"
  fi
}
replace_or_append '/etc/etcd/etcd.conf' '^ETCD_AUTO_TLS=' 'false' 'CCE-80573-9' '%s=%s'
# END fix for 'etcd_auto_tls'

###############################################################################
# BEGIN fix (19 / 109) for 'etcd_client_cert_auth'
###############################################################################
(>&2 echo "Remediating rule 19/109: 'etcd_client_cert_auth'")
# Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append <config_file_location> <key_to_search> <new_value> [<CCE number or literal '@CCENUM@' if unknown>] [printf-like format, default is '$default_format']" >&2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] && [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \>),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\>" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\>.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" >> "$config_file"
    printf '%s\n' "$formatted_output" >> "$config_file"
  fi
}
replace_or_append '/etc/etcd/etcd.conf' '^ETCD_CLIENT_CERT_AUTH=' 'true' 'CCE-80579-6' '%s=%s'
# END fix for 'etcd_client_cert_auth'

###############################################################################
# BEGIN fix (20 / 109) for 'etcd_peer_key_file'
###############################################################################
(>&2 echo "Remediating rule 20/109: 'etcd_peer_key_file'")
# Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append <config_file_location> <key_to_search> <new_value> [<CCE number or literal '@CCENUM@' if unknown>] [printf-like format, default is '$default_format']" >&2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] && [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \>),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\>" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\>.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" >> "$config_file"
    printf '%s\n' "$formatted_output" >> "$config_file"
  fi
}
replace_or_append '/etc/etcd/etcd.conf' '^ETCD_PEER_KEY_FILE=' /etc/etcd/peer.key 'CCE-80581-2' '%s=%s'
# END fix for 'etcd_peer_key_file'

###############################################################################
# BEGIN fix (21 / 109) for 'etcd_peer_cert_file'
###############################################################################
(>&2 echo "Remediating rule 21/109: 'etcd_peer_cert_file'")
# Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append <config_file_location> <key_to_search> <new_value> [<CCE number or literal '@CCENUM@' if unknown>] [printf-like format, default is '$default_format']" >&2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] && [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \>),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\>" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\>.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" >> "$config_file"
    printf '%s\n' "$formatted_output" >> "$config_file"
  fi
}
replace_or_append '/etc/etcd/etcd.conf' '^ETCD_PEER_CERT_FILE=' /etc/etcd/peer.crt 'CCE-80580-4' '%s=%s'
# END fix for 'etcd_peer_cert_file'

###############################################################################
# BEGIN fix (22 / 109) for 'etcd_peer_auto_tls'
###############################################################################
(>&2 echo "Remediating rule 22/109: 'etcd_peer_auto_tls'")
# Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append <config_file_location> <key_to_search> <new_value> [<CCE number or literal '@CCENUM@' if unknown>] [printf-like format, default is '$default_format']" >&2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] && [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \>),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\>" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\>.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" >> "$config_file"
    printf '%s\n' "$formatted_output" >> "$config_file"
  fi
}
replace_or_append '/etc/etcd/etcd.conf' '^ETCD_PEER_AUTO_TLS=' 'false' 'CCE-80583-8' '%s=%s'
# END fix for 'etcd_peer_auto_tls'

###############################################################################
# BEGIN fix (23 / 109) for 'etcd_unique_ca'
###############################################################################
(>&2 echo "Remediating rule 23/109: 'etcd_unique_ca'")
# Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append <config_file_location> <key_to_search> <new_value> [<CCE number or literal '@CCENUM@' if unknown>] [printf-like format, default is '$default_format']" >&2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] && [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \>),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\>" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\>.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" >> "$config_file"
    printf '%s\n' "$formatted_output" >> "$config_file"
  fi
}
replace_or_append '/etc/etcd/etcd.conf' '^ETCD_TRUSTED_CA_FILE=' '/etc/etcd/ca.crt' 'CCE-80585-3' '%s=%s'
# END fix for 'etcd_unique_ca'

###############################################################################
# BEGIN fix (24 / 109) for 'etcd_max_wals'
###############################################################################
(>&2 echo "Remediating rule 24/109: 'etcd_max_wals'")
# Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append <config_file_location> <key_to_search> <new_value> [<CCE number or literal '@CCENUM@' if unknown>] [printf-like format, default is '$default_format']" >&2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] && [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \>),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\>" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\>.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" >> "$config_file"
    printf '%s\n' "$formatted_output" >> "$config_file"
  fi
}
replace_or_append '/etc/etcd/etcd.conf' '^ETCD_MAX_WALS=' '0' 'CCE-80584-6' '%s=%s'
# END fix for 'etcd_max_wals'

###############################################################################
# BEGIN fix (25 / 109) for 'etcd_peer_client_cert_auth'
###############################################################################
(>&2 echo "Remediating rule 25/109: 'etcd_peer_client_cert_auth'")
# Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append <config_file_location> <key_to_search> <new_value> [<CCE number or literal '@CCENUM@' if unknown>] [printf-like format, default is '$default_format']" >&2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] && [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \>),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\>" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\>.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" >> "$config_file"
    printf '%s\n' "$formatted_output" >> "$config_file"
  fi
}
replace_or_append '/etc/etcd/etcd.conf' '^ETCD_PEER_CLIENT_CERT_AUTH=' 'true' 'CCE-80582-0' '%s=%s'
# END fix for 'etcd_peer_client_cert_auth'

###############################################################################
# BEGIN fix (26 / 109) for 'etcd_cert_file'
###############################################################################
(>&2 echo "Remediating rule 26/109: 'etcd_cert_file'")
# Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append <config_file_location> <key_to_search> <new_value> [<CCE number or literal '@CCENUM@' if unknown>] [printf-like format, default is '$default_format']" >&2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] && [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \>),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\>" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\>.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" >> "$config_file"
    printf '%s\n' "$formatted_output" >> "$config_file"
  fi
}
replace_or_append '/etc/etcd/etcd.conf' '^ETCD_CERT_FILE=' /etc/etcd/server.crt 'CCE-80577-0' '%s=%s'
# END fix for 'etcd_cert_file'

###############################################################################
# BEGIN fix (27 / 109) for 'etcd_wal_dir'
###############################################################################
(>&2 echo "Remediating rule 27/109: 'etcd_wal_dir'")
# Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append <config_file_location> <key_to_search> <new_value> [<CCE number or literal '@CCENUM@' if unknown>] [printf-like format, default is '$default_format']" >&2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] && [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \>),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\>" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\>.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" >> "$config_file"
    printf '%s\n' "$formatted_output" >> "$config_file"
  fi
}
replace_or_append '/etc/etcd/etcd.conf' '^ETCD_WAL_DIR=' '/var/lib/etcd/member/wal' 'CCE-80586-1' '%s=%s'
# END fix for 'etcd_wal_dir'

###############################################################################
# BEGIN fix (28 / 109) for 'etcd_key_file'
###############################################################################
(>&2 echo "Remediating rule 28/109: 'etcd_key_file'")
# Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append <config_file_location> <key_to_search> <new_value> [<CCE number or literal '@CCENUM@' if unknown>] [printf-like format, default is '$default_format']" >&2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] && [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \>),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\>" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\>.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" >> "$config_file"
    printf '%s\n' "$formatted_output" >> "$config_file"
  fi
}
replace_or_append '/etc/etcd/etcd.conf' '^ETCD_KEY_FILE=' /etc/etcd/server.key 'CCE-80578-8' '%s=%s'
# END fix for 'etcd_key_file'

###############################################################################
# BEGIN fix (29 / 109) for 'file_owner_node_config'
###############################################################################
(>&2 echo "Remediating rule 29/109: 'file_owner_node_config'")


chown 0 /etc/origin/node/node-config.yaml
# END fix for 'file_owner_node_config'

###############################################################################
# BEGIN fix (30 / 109) for 'file_groupowner_master_cni_conf'
###############################################################################
(>&2 echo "Remediating rule 30/109: 'file_groupowner_master_cni_conf'")


find /etc/cni/net.d/ -regex '^.*$' -exec chgrp 0 {} \;
# END fix for 'file_groupowner_master_cni_conf'

###############################################################################
# BEGIN fix (31 / 109) for 'file_permissions_etc_origin'
###############################################################################
(>&2 echo "Remediating rule 31/109: 'file_permissions_etc_origin'")

chmod 0700 /etc/origin/
# END fix for 'file_permissions_etc_origin'

###############################################################################
# BEGIN fix (32 / 109) for 'file_groupowner_master_openvswitch'
###############################################################################
(>&2 echo "Remediating rule 32/109: 'file_groupowner_master_openvswitch'")


find /etc/origin/openvswitch/ -regex '^.*$' -exec chgrp 0 {} \;
# END fix for 'file_groupowner_master_openvswitch'

###############################################################################
# BEGIN fix (33 / 109) for 'file_groupowner_master_openshift_kubeconfig'
###############################################################################
(>&2 echo "Remediating rule 33/109: 'file_groupowner_master_openshift_kubeconfig'")


chgrp 0 /etc/origin/master/openshift-master.kubeconfig
# END fix for 'file_groupowner_master_openshift_kubeconfig'

###############################################################################
# BEGIN fix (34 / 109) for 'file_owner_master_etcd'
###############################################################################
(>&2 echo "Remediating rule 34/109: 'file_owner_master_etcd'")


chown 0 /etc/origin/node/pods/etcd.yaml
# END fix for 'file_owner_master_etcd'

###############################################################################
# BEGIN fix (35 / 109) for 'file_groupowner_master_admin_conf'
###############################################################################
(>&2 echo "Remediating rule 35/109: 'file_groupowner_master_admin_conf'")


chgrp 0 /etc/origin/master/admin.kubeconfig
# END fix for 'file_groupowner_master_admin_conf'

###############################################################################
# BEGIN fix (36 / 109) for 'file_permissions_openshift_node_service'
###############################################################################
(>&2 echo "Remediating rule 36/109: 'file_permissions_openshift_node_service'")

chmod 0644 /etc/systemd/system/atomic-openshift-node.service
# END fix for 'file_permissions_openshift_node_service'

###############################################################################
# BEGIN fix (37 / 109) for 'file_groupowner_etc_origin'
###############################################################################
(>&2 echo "Remediating rule 37/109: 'file_groupowner_etc_origin'")


chgrp 0 /etc/origin/
# END fix for 'file_groupowner_etc_origin'

###############################################################################
# BEGIN fix (38 / 109) for 'file_permissions_master_openvswitch'
###############################################################################
(>&2 echo "Remediating rule 38/109: 'file_permissions_master_openvswitch'")

find /etc/origin/openvswitch/ -regex '^.*$' -exec chmod 0644 {} \;
# END fix for 'file_permissions_master_openvswitch'

###############################################################################
# BEGIN fix (39 / 109) for 'file_groupowner_master_controller_manager'
###############################################################################
(>&2 echo "Remediating rule 39/109: 'file_groupowner_master_controller_manager'")


chgrp 0 /etc/origin/node/pods/controller.yaml
# END fix for 'file_groupowner_master_controller_manager'

###############################################################################
# BEGIN fix (40 / 109) for 'file_owner_var_lib_etcd'
###############################################################################
(>&2 echo "Remediating rule 40/109: 'file_owner_var_lib_etcd'")


chown 0 /var/lib/etcd/
# END fix for 'file_owner_var_lib_etcd'

###############################################################################
# BEGIN fix (41 / 109) for 'file_groupowner_node_config'
###############################################################################
(>&2 echo "Remediating rule 41/109: 'file_groupowner_node_config'")


chgrp 0 /etc/origin/node/node-config.yaml
# END fix for 'file_groupowner_node_config'

###############################################################################
# BEGIN fix (42 / 109) for 'file_owner_master_openvswitch'
###############################################################################
(>&2 echo "Remediating rule 42/109: 'file_owner_master_openvswitch'")


find /etc/origin/openvswitch/ -regex '^.*$' -exec chown 0 {} \;
# END fix for 'file_owner_master_openvswitch'

###############################################################################
# BEGIN fix (43 / 109) for 'file_groupowner_openshift_node_client_crt'
###############################################################################
(>&2 echo "Remediating rule 43/109: 'file_groupowner_openshift_node_client_crt'")


chgrp 0 /etc/origin/node/client-ca.crt
# END fix for 'file_groupowner_openshift_node_client_crt'

###############################################################################
# BEGIN fix (44 / 109) for 'file_owner_master_admin_conf'
###############################################################################
(>&2 echo "Remediating rule 44/109: 'file_owner_master_admin_conf'")


chown 0 /etc/origin/master/admin.kubeconfig
# END fix for 'file_owner_master_admin_conf'

###############################################################################
# BEGIN fix (45 / 109) for 'file_permissions_master_openshift_kubeconfig'
###############################################################################
(>&2 echo "Remediating rule 45/109: 'file_permissions_master_openshift_kubeconfig'")

chmod 0600 /etc/origin/master/openshift-master.kubeconfig
# END fix for 'file_permissions_master_openshift_kubeconfig'

###############################################################################
# BEGIN fix (46 / 109) for 'file_owner_master_cni_conf'
###############################################################################
(>&2 echo "Remediating rule 46/109: 'file_owner_master_cni_conf'")


find /etc/cni/net.d/ -regex '^.*$' -exec chown 0 {} \;
# END fix for 'file_owner_master_cni_conf'

###############################################################################
# BEGIN fix (47 / 109) for 'file_groupowner_master_scheduler_conf'
###############################################################################
(>&2 echo "Remediating rule 47/109: 'file_groupowner_master_scheduler_conf'")


chgrp 0 /etc/origin/master/scheduler.json
# END fix for 'file_groupowner_master_scheduler_conf'

###############################################################################
# BEGIN fix (48 / 109) for 'file_permissions_var_lib_etcd'
###############################################################################
(>&2 echo "Remediating rule 48/109: 'file_permissions_var_lib_etcd'")

chmod 0700 /var/lib/etcd/
# END fix for 'file_permissions_var_lib_etcd'

###############################################################################
# BEGIN fix (49 / 109) for 'file_owner_master_api_server'
###############################################################################
(>&2 echo "Remediating rule 49/109: 'file_owner_master_api_server'")


chown 0 /etc/origin/node/pods/apiserver.yaml
# END fix for 'file_owner_master_api_server'

###############################################################################
# BEGIN fix (50 / 109) for 'file_groupowner_master_openshift_conf'
###############################################################################
(>&2 echo "Remediating rule 50/109: 'file_groupowner_master_openshift_conf'")


chgrp 0 /etc/origin/master/master-config.yaml
# END fix for 'file_groupowner_master_openshift_conf'

###############################################################################
# BEGIN fix (51 / 109) for 'file_owner_openshift_node_client_crt'
###############################################################################
(>&2 echo "Remediating rule 51/109: 'file_owner_openshift_node_client_crt'")


chown 0 /etc/origin/node/client-ca.crt
# END fix for 'file_owner_openshift_node_client_crt'

###############################################################################
# BEGIN fix (52 / 109) for 'file_permissions_master_scheduler_conf'
###############################################################################
(>&2 echo "Remediating rule 52/109: 'file_permissions_master_scheduler_conf'")

chmod 0600 /etc/origin/master/scheduler.json
# END fix for 'file_permissions_master_scheduler_conf'

###############################################################################
# BEGIN fix (53 / 109) for 'file_groupowner_var_lib_etcd'
###############################################################################
(>&2 echo "Remediating rule 53/109: 'file_groupowner_var_lib_etcd'")


chgrp 0 /var/lib/etcd/
# END fix for 'file_groupowner_var_lib_etcd'

###############################################################################
# BEGIN fix (54 / 109) for 'file_permissions_master_openshift_conf'
###############################################################################
(>&2 echo "Remediating rule 54/109: 'file_permissions_master_openshift_conf'")

chmod 0600 /etc/origin/master/master-config.yaml
# END fix for 'file_permissions_master_openshift_conf'

###############################################################################
# BEGIN fix (55 / 109) for 'file_owner_master_controller_manager'
###############################################################################
(>&2 echo "Remediating rule 55/109: 'file_owner_master_controller_manager'")


chown 0 /etc/origin/node/pods/controller.yaml
# END fix for 'file_owner_master_controller_manager'

###############################################################################
# BEGIN fix (56 / 109) for 'file_groupowner_master_etcd'
###############################################################################
(>&2 echo "Remediating rule 56/109: 'file_groupowner_master_etcd'")


chgrp 0 /etc/origin/node/pods/etcd.yaml
# END fix for 'file_groupowner_master_etcd'

###############################################################################
# BEGIN fix (57 / 109) for 'file_owner_master_scheduler_conf'
###############################################################################
(>&2 echo "Remediating rule 57/109: 'file_owner_master_scheduler_conf'")


chown 0 /etc/origin/master/scheduler.json
# END fix for 'file_owner_master_scheduler_conf'

###############################################################################
# BEGIN fix (58 / 109) for 'file_owner_master_openshift_conf'
###############################################################################
(>&2 echo "Remediating rule 58/109: 'file_owner_master_openshift_conf'")


chown 0 /etc/origin/master/master-config.yaml
# END fix for 'file_owner_master_openshift_conf'

###############################################################################
# BEGIN fix (59 / 109) for 'file_permissions_master_controller_manager'
###############################################################################
(>&2 echo "Remediating rule 59/109: 'file_permissions_master_controller_manager'")

chmod 0600 /etc/origin/node/pods/controller.yaml
# END fix for 'file_permissions_master_controller_manager'

###############################################################################
# BEGIN fix (60 / 109) for 'file_owner_etc_origin'
###############################################################################
(>&2 echo "Remediating rule 60/109: 'file_owner_etc_origin'")


chown 0 /etc/origin/
# END fix for 'file_owner_etc_origin'

###############################################################################
# BEGIN fix (61 / 109) for 'file_permissions_master_etcd'
###############################################################################
(>&2 echo "Remediating rule 61/109: 'file_permissions_master_etcd'")

chmod 0600 /etc/origin/node/pods/etcd.yaml
# END fix for 'file_permissions_master_etcd'

###############################################################################
# BEGIN fix (62 / 109) for 'file_groupowner_openshift_node_service'
###############################################################################
(>&2 echo "Remediating rule 62/109: 'file_groupowner_openshift_node_service'")


chgrp 0 /etc/systemd/system/atomic-openshift-node.service
# END fix for 'file_groupowner_openshift_node_service'

###############################################################################
# BEGIN fix (63 / 109) for 'file_owner_master_openshift_kubeconfig'
###############################################################################
(>&2 echo "Remediating rule 63/109: 'file_owner_master_openshift_kubeconfig'")


chown 0 /etc/origin/master/openshift-master.kubeconfig
# END fix for 'file_owner_master_openshift_kubeconfig'

###############################################################################
# BEGIN fix (64 / 109) for 'file_permissions_node_config'
###############################################################################
(>&2 echo "Remediating rule 64/109: 'file_permissions_node_config'")

chmod 0600 /etc/origin/node/node-config.yaml
# END fix for 'file_permissions_node_config'

###############################################################################
# BEGIN fix (65 / 109) for 'file_groupowner_master_api_server'
###############################################################################
(>&2 echo "Remediating rule 65/109: 'file_groupowner_master_api_server'")


chgrp 0 /etc/origin/node/pods/apiserver.yaml
# END fix for 'file_groupowner_master_api_server'

###############################################################################
# BEGIN fix (66 / 109) for 'file_permissions_master_cni_conf'
###############################################################################
(>&2 echo "Remediating rule 66/109: 'file_permissions_master_cni_conf'")

find /etc/cni/net.d/ -regex '^.*$' -exec chmod 0644 {} \;
# END fix for 'file_permissions_master_cni_conf'

###############################################################################
# BEGIN fix (67 / 109) for 'file_permissions_openshift_node_client_crt'
###############################################################################
(>&2 echo "Remediating rule 67/109: 'file_permissions_openshift_node_client_crt'")

chmod 0600 /etc/origin/node/client-ca.crt
# END fix for 'file_permissions_openshift_node_client_crt'

###############################################################################
# BEGIN fix (68 / 109) for 'file_owner_openshift_node_service'
###############################################################################
(>&2 echo "Remediating rule 68/109: 'file_owner_openshift_node_service'")


chown 0 /etc/systemd/system/atomic-openshift-node.service
# END fix for 'file_owner_openshift_node_service'

###############################################################################
# BEGIN fix (69 / 109) for 'file_permissions_master_admin_conf'
###############################################################################
(>&2 echo "Remediating rule 69/109: 'file_permissions_master_admin_conf'")

chmod 0600 /etc/origin/master/admin.kubeconfig
# END fix for 'file_permissions_master_admin_conf'

###############################################################################
# BEGIN fix (70 / 109) for 'file_permissions_master_api_server'
###############################################################################
(>&2 echo "Remediating rule 70/109: 'file_permissions_master_api_server'")

chmod 0600 /etc/origin/node/pods/apiserver.yaml
# END fix for 'file_permissions_master_api_server'

###############################################################################
# BEGIN fix (71 / 109) for 'api_server_insecure_port'
###############################################################################
(>&2 echo "Remediating rule 71/109: 'api_server_insecure_port'")
(>&2 echo "FIX FOR THIS RULE 'api_server_insecure_port' IS MISSING!")
# END fix for 'api_server_insecure_port'

###############################################################################
# BEGIN fix (72 / 109) for 'api_server_tls_private_key'
###############################################################################
(>&2 echo "Remediating rule 72/109: 'api_server_tls_private_key'")
(>&2 echo "FIX FOR THIS RULE 'api_server_tls_private_key' IS MISSING!")
# END fix for 'api_server_tls_private_key'

###############################################################################
# BEGIN fix (73 / 109) for 'api_server_tls_cert'
###############################################################################
(>&2 echo "Remediating rule 73/109: 'api_server_tls_cert'")
(>&2 echo "FIX FOR THIS RULE 'api_server_tls_cert' IS MISSING!")
# END fix for 'api_server_tls_cert'

###############################################################################
# BEGIN fix (74 / 109) for 'api_server_client_ca'
###############################################################################
(>&2 echo "Remediating rule 74/109: 'api_server_client_ca'")
(>&2 echo "FIX FOR THIS RULE 'api_server_client_ca' IS MISSING!")
# END fix for 'api_server_client_ca'

###############################################################################
# BEGIN fix (75 / 109) for 'api_server_audit_log_path'
###############################################################################
(>&2 echo "Remediating rule 75/109: 'api_server_audit_log_path'")
(>&2 echo "FIX FOR THIS RULE 'api_server_audit_log_path' IS MISSING!")
# END fix for 'api_server_audit_log_path'

###############################################################################
# BEGIN fix (76 / 109) for 'api_server_tls_cipher_suites'
###############################################################################
(>&2 echo "Remediating rule 76/109: 'api_server_tls_cipher_suites'")
(>&2 echo "FIX FOR THIS RULE 'api_server_tls_cipher_suites' IS MISSING!")
# END fix for 'api_server_tls_cipher_suites'

###############################################################################
# BEGIN fix (77 / 109) for 'api_server_admission_control_plugin_EventRateLimit'
###############################################################################
(>&2 echo "Remediating rule 77/109: 'api_server_admission_control_plugin_EventRateLimit'")
(>&2 echo "FIX FOR THIS RULE 'api_server_admission_control_plugin_EventRateLimit' IS MISSING!")
# END fix for 'api_server_admission_control_plugin_EventRateLimit'

###############################################################################
# BEGIN fix (78 / 109) for 'api_server_authorization_mode'
###############################################################################
(>&2 echo "Remediating rule 78/109: 'api_server_authorization_mode'")
(>&2 echo "FIX FOR THIS RULE 'api_server_authorization_mode' IS MISSING!")
# END fix for 'api_server_authorization_mode'

###############################################################################
# BEGIN fix (79 / 109) for 'api_server_audit_log_maxage'
###############################################################################
(>&2 echo "Remediating rule 79/109: 'api_server_audit_log_maxage'")
(>&2 echo "FIX FOR THIS RULE 'api_server_audit_log_maxage' IS MISSING!")
# END fix for 'api_server_audit_log_maxage'

###############################################################################
# BEGIN fix (80 / 109) for 'api_server_admission_control_plugin_ServiceAccount'
###############################################################################
(>&2 echo "Remediating rule 80/109: 'api_server_admission_control_plugin_ServiceAccount'")
(>&2 echo "FIX FOR THIS RULE 'api_server_admission_control_plugin_ServiceAccount' IS MISSING!")
# END fix for 'api_server_admission_control_plugin_ServiceAccount'

###############################################################################
# BEGIN fix (81 / 109) for 'api_server_admission_control_plugin_AlwaysAdmit'
###############################################################################
(>&2 echo "Remediating rule 81/109: 'api_server_admission_control_plugin_AlwaysAdmit'")
(>&2 echo "FIX FOR THIS RULE 'api_server_admission_control_plugin_AlwaysAdmit' IS MISSING!")
# END fix for 'api_server_admission_control_plugin_AlwaysAdmit'

###############################################################################
# BEGIN fix (82 / 109) for 'api_server_kubelet_client_cert'
###############################################################################
(>&2 echo "Remediating rule 82/109: 'api_server_kubelet_client_cert'")
(>&2 echo "FIX FOR THIS RULE 'api_server_kubelet_client_cert' IS MISSING!")
# END fix for 'api_server_kubelet_client_cert'

###############################################################################
# BEGIN fix (83 / 109) for 'api_server_anonymous_auth'
###############################################################################
(>&2 echo "Remediating rule 83/109: 'api_server_anonymous_auth'")
(>&2 echo "FIX FOR THIS RULE 'api_server_anonymous_auth' IS MISSING!")
# END fix for 'api_server_anonymous_auth'

###############################################################################
# BEGIN fix (84 / 109) for 'api_server_admission_control_plugin_DenyEscalatingExec'
###############################################################################
(>&2 echo "Remediating rule 84/109: 'api_server_admission_control_plugin_DenyEscalatingExec'")
(>&2 echo "FIX FOR THIS RULE 'api_server_admission_control_plugin_DenyEscalatingExec' IS MISSING!")
# END fix for 'api_server_admission_control_plugin_DenyEscalatingExec'

###############################################################################
# BEGIN fix (85 / 109) for 'api_server_etcd_ca'
###############################################################################
(>&2 echo "Remediating rule 85/109: 'api_server_etcd_ca'")
(>&2 echo "FIX FOR THIS RULE 'api_server_etcd_ca' IS MISSING!")
# END fix for 'api_server_etcd_ca'

###############################################################################
# BEGIN fix (86 / 109) for 'api_server_advanced_auditing'
###############################################################################
(>&2 echo "Remediating rule 86/109: 'api_server_advanced_auditing'")
(>&2 echo "FIX FOR THIS RULE 'api_server_advanced_auditing' IS MISSING!")
# END fix for 'api_server_advanced_auditing'

###############################################################################
# BEGIN fix (87 / 109) for 'api_server_audit_log_maxbackup'
###############################################################################
(>&2 echo "Remediating rule 87/109: 'api_server_audit_log_maxbackup'")
(>&2 echo "FIX FOR THIS RULE 'api_server_audit_log_maxbackup' IS MISSING!")
# END fix for 'api_server_audit_log_maxbackup'

###############################################################################
# BEGIN fix (88 / 109) for 'api_server_audit_log_maxsize'
###############################################################################
(>&2 echo "Remediating rule 88/109: 'api_server_audit_log_maxsize'")
(>&2 echo "FIX FOR THIS RULE 'api_server_audit_log_maxsize' IS MISSING!")
# END fix for 'api_server_audit_log_maxsize'

###############################################################################
# BEGIN fix (89 / 109) for 'api_server_admission_control_plugin_NodeRestriction'
###############################################################################
(>&2 echo "Remediating rule 89/109: 'api_server_admission_control_plugin_NodeRestriction'")
(>&2 echo "FIX FOR THIS RULE 'api_server_admission_control_plugin_NodeRestriction' IS MISSING!")
# END fix for 'api_server_admission_control_plugin_NodeRestriction'

###############################################################################
# BEGIN fix (90 / 109) for 'api_server_admission_control_plugin_SecurityContextDeny'
###############################################################################
(>&2 echo "Remediating rule 90/109: 'api_server_admission_control_plugin_SecurityContextDeny'")
(>&2 echo "FIX FOR THIS RULE 'api_server_admission_control_plugin_SecurityContextDeny' IS MISSING!")
# END fix for 'api_server_admission_control_plugin_SecurityContextDeny'

###############################################################################
# BEGIN fix (91 / 109) for 'api_server_admission_control_plugin_PodSecurityPolicy'
###############################################################################
(>&2 echo "Remediating rule 91/109: 'api_server_admission_control_plugin_PodSecurityPolicy'")
(>&2 echo "FIX FOR THIS RULE 'api_server_admission_control_plugin_PodSecurityPolicy' IS MISSING!")
# END fix for 'api_server_admission_control_plugin_PodSecurityPolicy'

###############################################################################
# BEGIN fix (92 / 109) for 'api_server_basic_auth'
###############################################################################
(>&2 echo "Remediating rule 92/109: 'api_server_basic_auth'")
(>&2 echo "FIX FOR THIS RULE 'api_server_basic_auth' IS MISSING!")
# END fix for 'api_server_basic_auth'

###############################################################################
# BEGIN fix (93 / 109) for 'api_server_kubelet_client_key'
###############################################################################
(>&2 echo "Remediating rule 93/109: 'api_server_kubelet_client_key'")
(>&2 echo "FIX FOR THIS RULE 'api_server_kubelet_client_key' IS MISSING!")
# END fix for 'api_server_kubelet_client_key'

###############################################################################
# BEGIN fix (94 / 109) for 'api_server_service_account_private_key'
###############################################################################
(>&2 echo "Remediating rule 94/109: 'api_server_service_account_private_key'")
(>&2 echo "FIX FOR THIS RULE 'api_server_service_account_private_key' IS MISSING!")
# END fix for 'api_server_service_account_private_key'

###############################################################################
# BEGIN fix (95 / 109) for 'api_server_service_account_public_key'
###############################################################################
(>&2 echo "Remediating rule 95/109: 'api_server_service_account_public_key'")
(>&2 echo "FIX FOR THIS RULE 'api_server_service_account_public_key' IS MISSING!")
# END fix for 'api_server_service_account_public_key'

###############################################################################
# BEGIN fix (96 / 109) for 'api_server_etcd_key'
###############################################################################
(>&2 echo "Remediating rule 96/109: 'api_server_etcd_key'")
(>&2 echo "FIX FOR THIS RULE 'api_server_etcd_key' IS MISSING!")
# END fix for 'api_server_etcd_key'

###############################################################################
# BEGIN fix (97 / 109) for 'api_server_insecure_allow_any_token'
###############################################################################
(>&2 echo "Remediating rule 97/109: 'api_server_insecure_allow_any_token'")
(>&2 echo "FIX FOR THIS RULE 'api_server_insecure_allow_any_token' IS MISSING!")
# END fix for 'api_server_insecure_allow_any_token'

###############################################################################
# BEGIN fix (98 / 109) for 'api_server_admission_control_plugin_AlwaysPullImages'
###############################################################################
(>&2 echo "Remediating rule 98/109: 'api_server_admission_control_plugin_AlwaysPullImages'")
(>&2 echo "FIX FOR THIS RULE 'api_server_admission_control_plugin_AlwaysPullImages' IS MISSING!")
# END fix for 'api_server_admission_control_plugin_AlwaysPullImages'

###############################################################################
# BEGIN fix (99 / 109) for 'api_server_token_auth'
###############################################################################
(>&2 echo "Remediating rule 99/109: 'api_server_token_auth'")
(>&2 echo "FIX FOR THIS RULE 'api_server_token_auth' IS MISSING!")
# END fix for 'api_server_token_auth'

###############################################################################
# BEGIN fix (100 / 109) for 'api_server_request_timeout'
###############################################################################
(>&2 echo "Remediating rule 100/109: 'api_server_request_timeout'")
(>&2 echo "FIX FOR THIS RULE 'api_server_request_timeout' IS MISSING!")
# END fix for 'api_server_request_timeout'

###############################################################################
# BEGIN fix (101 / 109) for 'api_server_kubelet_https'
###############################################################################
(>&2 echo "Remediating rule 101/109: 'api_server_kubelet_https'")
(>&2 echo "FIX FOR THIS RULE 'api_server_kubelet_https' IS MISSING!")
# END fix for 'api_server_kubelet_https'

###############################################################################
# BEGIN fix (102 / 109) for 'api_server_etcd_cert'
###############################################################################
(>&2 echo "Remediating rule 102/109: 'api_server_etcd_cert'")
(>&2 echo "FIX FOR THIS RULE 'api_server_etcd_cert' IS MISSING!")
# END fix for 'api_server_etcd_cert'

###############################################################################
# BEGIN fix (103 / 109) for 'api_server_experimental_encryption_provider_config'
###############################################################################
(>&2 echo "Remediating rule 103/109: 'api_server_experimental_encryption_provider_config'")
(>&2 echo "FIX FOR THIS RULE 'api_server_experimental_encryption_provider_config' IS MISSING!")
# END fix for 'api_server_experimental_encryption_provider_config'

###############################################################################
# BEGIN fix (104 / 109) for 'api_server_kubelet_certificate_authority'
###############################################################################
(>&2 echo "Remediating rule 104/109: 'api_server_kubelet_certificate_authority'")
(>&2 echo "FIX FOR THIS RULE 'api_server_kubelet_certificate_authority' IS MISSING!")
# END fix for 'api_server_kubelet_certificate_authority'

###############################################################################
# BEGIN fix (105 / 109) for 'api_server_admission_control_plugin_NamespaceLifecycle'
###############################################################################
(>&2 echo "Remediating rule 105/109: 'api_server_admission_control_plugin_NamespaceLifecycle'")
(>&2 echo "FIX FOR THIS RULE 'api_server_admission_control_plugin_NamespaceLifecycle' IS MISSING!")
# END fix for 'api_server_admission_control_plugin_NamespaceLifecycle'

###############################################################################
# BEGIN fix (106 / 109) for 'api_server_service_account_ca'
###############################################################################
(>&2 echo "Remediating rule 106/109: 'api_server_service_account_ca'")
(>&2 echo "FIX FOR THIS RULE 'api_server_service_account_ca' IS MISSING!")
# END fix for 'api_server_service_account_ca'

###############################################################################
# BEGIN fix (107 / 109) for 'api_server_experimental_encryption_provider_cipher'
###############################################################################
(>&2 echo "Remediating rule 107/109: 'api_server_experimental_encryption_provider_cipher'")
(>&2 echo "FIX FOR THIS RULE 'api_server_experimental_encryption_provider_cipher' IS MISSING!")
# END fix for 'api_server_experimental_encryption_provider_cipher'

###############################################################################
# BEGIN fix (108 / 109) for 'api_server_secure_port'
###############################################################################
(>&2 echo "Remediating rule 108/109: 'api_server_secure_port'")
(>&2 echo "FIX FOR THIS RULE 'api_server_secure_port' IS MISSING!")
# END fix for 'api_server_secure_port'

###############################################################################
# BEGIN fix (109 / 109) for 'api_server_insecure_bind_address'
###############################################################################
(>&2 echo "Remediating rule 109/109: 'api_server_insecure_bind_address'")
(>&2 echo "FIX FOR THIS RULE 'api_server_insecure_bind_address' IS MISSING!")
# END fix for 'api_server_insecure_bind_address'

